/*
Finally или просто код?
Сравните два фрагмента кода.

Первый использует finally для выполнения кода после try..catch:
*/

try {
	/*начать работу
  работать*/
} catch (e) {
	//обработать ошибку
} finally {
	//очистить рабочее пространство
}

//Второй фрагмент просто ставит очистку после try..catch:

try {
	/*начать работу
  работать*/
} catch (e) {
	//обработать ошибку
}

//очистить рабочее пространство

/*
Нам определённо нужна очистка после работы, неважно возникли ошибки или нет.

Есть ли здесь преимущество в использовании finally или оба фрагмента кода одинаковы? 
Если такое преимущество есть, то дайте пример, когда оно проявляется.
*/

/*
Рассмотрим код внутри функции.

*/
//В таком примере очистка все равно сработает
function f() {
	try {
		/*начать работу
		работать*/
		return result;
	} catch (e) {
		//обработать ошибку
	} finally {
		//очистить рабочее пространство
	}
}

/*
Поведение будет различным, если управление каким-то образом выпрыгнет из try..catch.
Секция finally работает в любом случае при любом выходе из try..catch, 
даже через return: сразу после того как try..catch выполнится, но до того, как вызывающий код получит контроль.
*/
